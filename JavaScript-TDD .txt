TDD = Test Drive Development

TDD is an approach to writing software where your write tests before you write
application code.

Basic Step - The TDD Mantra "Red, Green, Refactor":
  Red - write a test and make sure it fails.
  Green - write the simplest, easiest possible code to make it pass
  Refactor - optimise and/or simplify application code, make sure it still passes
  all tests.
  
Main benefit of TDD is that it will instill in you to write tests and write simpler
code.

There is a step before before Red. The thinking step. Conceptualize how the code will
work. This is Development not Design.

In these notes I'll be using Mocha and Chai

  $ cd /the/file/you/are/working/on
  $ npm install mocha -g
  $ npm install chai
  
You'll create two files. For example: photo-fetcher.js, and photo-fetcher-spec.js. 
The spec file is the file you will do your tests on.

In the spec file begin thinking of the simplest test code that will move your code
forward.

All of these tests are run using Node, so you have to use it's style.
  
   First of all, because all these tests run using Node, this means that we import 
   modules using the node-style require(). The next thing to note is that we are using 
   a ‘Behaviour Driven Development’ (BDD) style to write the tests. This is a variation 
   on TDD where tests are written in the form: Describe [thing]. It should [do something]. 
   The [thing] can be a module, or a class, or a method, or a function. Mocha includes 
   built-in functions like describe() and it() to make writing in this style possible.
   
There is currently too much Node syntax for me to truly understand what is going on. I'll
to do more learning and come back this.

http://jrsinclair.com/articles/2016/gentle-introduction-to-javascript-tdd-intro/
